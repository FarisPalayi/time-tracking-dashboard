/*
  This file is .scss instead of .sass because, in .sass, maps needs to be in one line.
  since $colors map here is big and fitting it to one line would be a bad idea in terms 
  of readability, I used the .scss here.
*/

// font-weight
$light: 300;
$medium: 400;
$bold: 500;

// other
$bd-rs: 13px;

// font-family
$font-primary: rubik, sans-serif;

// colors
$colors: (
  primary: (
    "softRed": hsl(15, 100%, 70%),
    "softBlue": hsl(195, 74%, 62%),
    "lightRed": hsl(348, 100%, 68%),
    "limeGreen": hsl(145, 58%, 55%),
    "violet": hsl(264, 64%, 52%),
    "softOrange": hsl(43, 84%, 65%),
    "blue": hsl(246, 80%, 60%),
  ),
  neutral: (
    "veryDarkBlue": hsl(226, 43%, 10%),
    "darkBlue": hsl(235, 46%, 20%),
    "desaturatedBlue": hsl(235, 45%, 61%),
    "paleBlue": hsl(236, 100%, 87%),
  ),
);

/*
  Creates CSS Variables which has a formatted name and a color code as its value.
  For example: it crates a variable like `--clr-primary-blue: hsl(246, 80%, 60%);`
*/
@mixin createCSSColorVariables($color-map) {
  @each $color-type, $colors in $color-map {
    @each $color-name, $color in $colors {
      --clr-#{$color-type}-#{$color-name}: #{$color};
    }
  }
}

// function used to get nested values from a map
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

@mixin desktop() {
  @media screen and (min-width: 920px) {
    @content;
  }
}
